clc

% mat = [1 2 3; 4 5 6; 7 8 9];              %# Sample matrix
% [r,c] = size(mat);                        %# Get the matrix size
% diagVec1 = repmat([ones(c-1,1); 0],r,1);  %# Make the first diagonal vector
%                                           %#   (for horizontal connections)
% diagVec1 = diagVec1(1:end-1);             %# Remove the last value
% diagVec2 = ones(c*(r-1),1);               %# Make the second diagonal vector
%                                           %#   (for vertical connections)
% adj = diag(diagVec1,1)+...                %# Add the diagonals to a zero matrix
%       diag(diagVec2,c);
% adj = adj+adj.';                         %'# Add the matrix to a transposed
%                                           %#   copy of itself to make it
%                                           %#   symmetric
% disp(adj)  
%%
%  g = sparse([1 1 1 2 2 3 3 4 5 6 7 7 8 9 9  9 9], [2 6 8 3 1 4 2 5 4 7 6 4 9 8 10 5 3],true,10,10)
% %  [S,C] = graphconncomp(g)
% [S,C] = conncomp(g)

%  g = sparse([1 1 1 1 2 3 5 5 4], [2 3 4 5 3 4 1 4 5],true,5,5)
%   [S,C] = graphconncomp(g,'DIRECTED',false)
% % [S,C] = conncomp(g)

%  g = sparse([1 1 2 2 3 3 4 4 4 4 5 5 6 7 8], [2 3 1 8 4 5 2 8 7 5 3 7 7 6 7],true,8,8)
%  [S,C] = graphconncomp(g,'DIRECTED',true)
% % [S,C] = conncomp(g)



% gr=zeros(5);
% gr(1,2)=1;
% gr(2,1)=1;
% gr(2,3)=1;
% gr(3,2)=1;
% gr(3,4)=1;
% gr(4,3)=1;
% gr(4,5)=1;
% gr(5,4)=1;
% 
% [S,C] = graphconncomp(g)
%%

% %  Pts=[89.946808 155.053192 200.138306 3.545661
% %  ;96.946808 157.053192 200.138306 6.545661
% %  ;103.500000 159.000000 200.857147 5.451515
% %  ;110.357140 160.928574 200.928558 5.345405
% %  ;117.319672 162.336060 200.057373 10.379566
% %  ;124.130249 164.260498 200.113434 5.381761
% %  ;131.130249 166.260498 200.113434 3.381761
% %  ;131.130249 160.260498 200.113434 4.381761
% %  ;131.130249 154.260498 200.113434 10.381761
% %  ;131.130249 146.260498 200.113434 4.381761
% %  ;131.130249 140.260498 200.113434 3.701761
% %  ;131.130249 134.260498 200.113434 4.381761
% %  ;131.130249 128.260498 200.113434 7.381761]
% 
% Pts=[89.946808 155.053192 200.138306 3.545661
%  ;96.946808 157.053192 200.138306 5.545661
%  ;103.500000 159.000000 200.857147 5.451515
%  ;110.357140 160.928574 200.928558 5.345405
%  ;117.319672 162.336060 200.057373 5.379566
%  ;124.130249 164.260498 200.113434 5.381761
%  ;181.130249 166.260498 200.113434 3.381761
%  ;131.130249 160.260498 200.113434 4.381761
%  ;131.130249 154.260498 200.113434 4.381761
%  ;131.130249 134.260498 200.113434 4.381761
%  ;131.130249 128.260498 200.113434 3.381761]
% 
% % Pts=[ 89.946808 155.053192 200.138306 3.545661;
% %  96.946808 157.053192 200.138306 5.545661;
% %  103.500000 159.000000 200.857147 5.451515;
% %  110.357140 160.928574 200.928558 5.345405;
% %  117.319672 162.336060 200.057373 5.379566;
% %  124.130249 164.260498 200.113434 5.381761;
% %  131.130249 166.260498 200.113434 3.381761;
% %  131.130249 160.260498 200.113434 4.381761;
% %  131.130249 154.260498 200.113434 4.381761;
% %  131.130249 146.260498 200.113434 4.381761;
% %  131.130249 140.260498 200.113434 3.701761;
% %  131.130249 134.260498 200.113434 4.381761;
% %  131.130249 128.260498 200.113434 3.381761  ]
% 
% 
% 
% % Pts=[89.946808 155.053192 200.138306 3.545661
% %  ;96.946808 157.053192 200.138306 5.545661
% %  ;103.500000 159.000000 200.857147 5.451515
% %  ;110.357140 160.928574 200.928558 5.345405
% %  ;117.319672 162.336060 200.057373 5.379566
% %  ;124.130249 164.260498 200.113434 5.381761
% %  ;131.130249 166.260498 200.113434 3.381761]
% 
% % Pts=[89.946808 155.053192 200.138306 3.545661
% %  ;96.946808 157.053192 200.138306 2.545661
% %  ;103.500000 159.000000 200.857147 5.451515
% %  ;110.357140 160.928574 200.928558 1.345405
% %  ;117.319672 162.336060 200.057373 5.379566
% %  ;124.130249 164.260498 200.113434 1.381761
% %  ;131.130249 166.260498 200.113434 3.381761]
% 
% 
% % Check connexity
% [n,m]=size(Pts)
% 
% tab1=[];
% tab2=[];
% for i=1:n-1
%     for j=(i+1):n
%         b1=Pts(i,1:3);
%         b2=Pts(j,1:3);
%         dist_euclide=norm(b1 - b2);
%         message=[num2str(i,'%2d'), ' et ', num2str(j,'%2d'),' Distance : ' num2str(dist_euclide)]
%         if(dist_euclide<=Pts(i,4)+Pts(j,4))
%           tab1=[tab1 i j] ;
%           tab2=[tab2 j i] ;
%         end
%     
%     end
% end
% 
% % tab1
% % tab2
% 
% 
%  g = sparse(tab1, tab2,true,n,n)
% [S1,C1] = graphconncomp(g,'DIRECTED',true)
% % [S2,C2] = conncomp(g)
% 
% if (range(C1) == 0)
%     disp('Graphe connexe')
% else
%     disp('Graphe non connexe')
% end
%%

% Pts=[89.946808 155.053192 200.138306 3.545661
%  ;96.946808 157.053192 200.138306 5.545661
%  ;103.500000 159.000000 200.857147 5.451515
%  ;110.357140 160.928574 200.928558 5.345405
%  ;117.319672 162.336060 200.057373 5.379566
%  ;124.130249 164.260498 200.113434 5.381761
%  ;131.130249 166.260498 200.113434 3.381761]
% 
% [n,m]=size(Pts);
% 
% nbptsvisual=15;
% rep=checkConnexity(Pts,n)
% 
% [phi, theta]=meshgrid([0:0.9:pi], [0:0.9:2*pi]);
% [ApproxError,Rayons,centre,MatRot] = approximeMinVolEllipse(Pts(1:n,1:3),Pts(1:n,4),0.001,0.5,phi,theta) 
% 
% [u v] = meshgrid(linspace(0,2*pi,nbptsvisual),linspace(-pi/2,pi/2,nbptsvisual));
% 
% x1 = Rayons(1)*cos(u').*cos(v');
% y1 = Rayons(2)*sin(u').*cos(v');
% z1 = Rayons(3)*sin(v');
% 
% % Rotation des points de l'ellipsoide pour l'afficher dans le repere de
% % depart.
% 
% for indx = 1:nbptsvisual
%     for indy = 1:nbptsvisual
%         poin = [x1(indx,indy) y1(indx,indy) z1(indx,indy)]';
%         Pt = MatRot * poin;
%         x1(indx,indy) = Pt(1)+centre(1);
%         y1(indx,indy) = Pt(2)+centre(2);
%         z1(indx,indy) = Pt(3)+centre(3);
%     end
% end
% 
%  hold on;
% mesh(x1,y1,z1,'facecolor','none');
% axis equal;     
%%
clc
% Delete rows in matrix
%  C = [2 2 2; 0 0 1; 1 2 3; 1 1 1;3 8 7]
%   C([1,2,5], :) = [];
%   C

   C = [2 2 2; 0 0 1; 1 2 3; 1 1 1;3 8 7]
  index = true(1, size(C, 1))
  index([1;4;5]) = false
  C = C(index, :)

% Selectionner les ligne dont la valeur des colonne est égale à une valeur

% C = [2 2 2 4; 0 0 1 1; 1 2 3 1; 1 1 1 1;3 8 7 4]
% % idx = ( C(:,4)== 4 )
% % ou
% idx=find(C(:,4)== 4)
%  Sel=C(idx, :) 

